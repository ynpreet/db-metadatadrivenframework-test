Function to Check If Data Exists for a Given Practice_ETL_ID in ADLS Gen2

This function checks whether any files exist inside the ADLS Gen2 storage for a given Practice_ETL_ID. If no files are found, the notebook exits without execution.

üîπ Steps in the Function
	1.	List all subdirectories (table folders) inside the Practice_ETL_ID directory.
	2.	Iterate through each table folder and check if it contains any files.
	3.	If at least one file is found, allow execution. Otherwise, exit the notebook.

üöÄ Function Implementation

def check_data_existence(practice_etl_id):
    """
    Checks if any files exist inside the ADLS Gen2 directory for a given Practice_ETL_ID.
    If no files are found, exits the notebook.
    
    :param practice_etl_id: The unique Practice_ETL_ID folder in ADLS Gen2.
    """
    
    # Define the base directory in ADLS Gen2
    base_path = f"abfss://{v_landing_container}@{v_storage_account_name}.dfs.core.windows.net/Landing/EMR/{practice_etl_id}/"
    
    try:
        # List all subdirectories (table names)
        table_folders = dbutils.fs.ls(base_path)
        table_paths = [folder.path for folder in table_folders]  # Extract full paths

        if not table_paths:
            print(f"‚ö†Ô∏è No subdirectories found under {base_path}. Exiting notebook.")
            dbutils.notebook.exit("No data available for processing.")
        
        # Check if any table folder contains files
        for table_path in table_paths:
            try:
                files = dbutils.fs.ls(table_path)  # List files inside the table folder
                if files:  # If at least one file exists, continue execution
                    print(f"‚úÖ Data found in {table_path}. Proceeding with execution.")
                    return  # Exit function and continue notebook execution
            except Exception as e:
                print(f"‚ö†Ô∏è Unable to access {table_path}. Error: {str(e)}")

        # If no files were found in any subdirectory, exit the notebook
        print(f"üö´ No files found for Practice_ETL_ID {practice_etl_id}. Exiting notebook.")
        dbutils.notebook.exit("No data available for processing.")

    except Exception as e:
        print(f"‚ùå Error accessing ADLS Gen2: {str(e)}")
        dbutils.notebook.exit("Error checking data existence.")

üí° How It Works
	1.	Gets the path of Practice_ETL_ID in ADLS Gen2.
	2.	Lists all directories (table names) inside it.
	3.	Iterates through each table directory and checks if files exist.
	4.	If at least one file exists, the notebook continues execution.
	5.	If no files are found, the notebook exits to avoid unnecessary processing.

üìù Example Usage

practice_etl_id = "16656"  # Example Practice_ETL_ID
check_data_existence(practice_etl_id)

üîπ Expected Behavior

Scenario	Outcome
Practice_ETL_ID exists and contains files	‚úÖ Continues execution
Practice_ETL_ID exists but no files inside	üö´ Exits notebook
Practice_ETL_ID does not exist in ADLS	‚ùå Exits with error

This ensures the pipeline only processes data when it‚Äôs actually available, making it more efficient. Would you like to extend this function further?



Databricks Unity Catalog Setup Guide (Step-by-Step for Each Environment: DEV, QA, and PROD)

This guide provides detailed step-by-step instructions for setting up Unity Catalog in Databricks for each environment (DEV, QA, PROD). The setup includes:
	1.	Creating an Azure Databricks Connector (Prerequisite for External Locations)
	2.	Creating External Locations (via UI)
	3.	Creating Catalogs
	4.	Creating Schemas
	5.	Granting Permissions to EXL Team (Using your exact code with ‚Äòlocation‚Äô suffix)

Assumption: The storage accounts exists for Each Environment: DEV, QA, and PROD. If not created, please create them as mentioned below:
	‚Ä¢	DEV ‚Üí bause1devmdlnudrt
	‚Ä¢	QA ‚Üí bause1qamdlnudrt
	‚Ä¢	PROD ‚Üí bause1prodmdlnudrt


1Ô∏è‚É£ Prerequisite: Create an Azure Databricks Connector & Linking it with storage accounts (Required for External Locations)

Before creating external locations, we need to create an Azure Databricks Connector to allow Databricks to authenticate with Azure Storage Accounts (ADLS Gen2).

Steps to Create the Databricks Connector
	1.	Go to Azure Portal ‚Üí Storage Accounts.
	2.	Open the Storage Account for your environment:
	‚Ä¢	DEV ‚Üí bause1devmdlnudrt
	‚Ä¢	QA ‚Üí bause1qamdlnudrt
	‚Ä¢	PROD ‚Üí bause1prodmdlnudrt
	3.	In the left panel, go to Access Control (IAM).
	4.	Click + Add ‚Üí Add Role Assignment.
	5.	Assign the following roles to Azure Databricks Connector:
	‚Ä¢	Storage Blob Data Contributor
	‚Ä¢	Storage Blob Data Reader
	6.	Click Next ‚Üí Assign Access to Managed Identity.
	7.	Select the Azure Databricks Connector for the environment. If you have not created it, please create the below connectors:
	‚Ä¢	DEV ‚Üí bause1dev-adb-access-connector
	‚Ä¢	QA ‚Üí bause1qa-adb-access-connector
	‚Ä¢	PROD ‚Üí bause1prod-adb-access-connector
	8.	Click Next ‚Üí Review + Assign.

Repeat these steps for all environments.

2Ô∏è‚É£ Setup for DEV Environment (ba-use1-dev-adb-daas)


Step 1: Create following containers in all the storage accounts:
- archive
- bronze
- gold
- landing
- logging
- metadata
- metastore
- rco-dw
- silver


Step 2: Create External Locations (via UI) in databricks
This basically allows databricks woekspace to interact with the containers you created in Step 1 above.

	1.	Go to Databricks UI ‚Üí Data ‚Üí External Locations.
	2.	Click Create External Location.
	3.	Fill in the details:
	‚Ä¢	Name: dev_<container>_location (e.g., dev_bronze_location)
	‚Ä¢	Storage URL: abfss://<container>@bause1devmdlnudrt.dfs.core.windows.net/
	‚Ä¢	Credential: Select Databricks Connector ‚Üí bause1dev-adb-access-connector
	4.	Click Create.
	5.	Repeat for all containers.

Step 2: Create the Catalog

CREATE CATALOG PH_EMR_CATALOG_DEV 
MANAGED LOCATION 'abfss://metastore@bause1devmdlnudrt.dfs.core.windows.net/';

Step 3: Create Schemas

USE CATALOG PH_EMR_CATALOG_DEV;

CREATE SCHEMA logging 
MANAGED LOCATION 'abfss://logging@bause1devmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA metadata 
MANAGED LOCATION 'abfss://metadata@bause1devmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA bronze 
MANAGED LOCATION 'abfss://bronze@bause1devmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA silver 
MANAGED LOCATION 'abfss://silver@bause1devmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA gold 
MANAGED LOCATION 'abfss://gold@bause1devmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA rco-dw 
MANAGED LOCATION 'abfss://rco-dw@bause1devmdlnudrt.dfs.core.windows.net/';

Step 4: Grant Permissions

GRANT MANAGE ON EXTERNAL LOCATION dev_archive_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION dev_bronze_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION dev_gold_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION dev_landing_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION dev_logging_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION dev_metadata_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION dev_metastore_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION dev_silver_location TO EXL_team;

3Ô∏è‚É£ Setup for QA Environment (ba-use1-qa-adb-daas)

Step 1: Create External Locations (via UI)
	1.	Go to Databricks UI ‚Üí Data ‚Üí External Locations.
	2.	Click Create External Location.
	3.	Fill in the details.
	4.	Repeat for all containers.

Step 2: Create the Catalog

CREATE CATALOG PH_EMR_CATALOG_QA 
MANAGED LOCATION 'abfss://metastore@bause1qamdlnudrt.dfs.core.windows.net/';

Step 3: Create Schemas

USE CATALOG PH_EMR_CATALOG_QA;

CREATE SCHEMA logging 
MANAGED LOCATION 'abfss://logging@bause1qamdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA metadata 
MANAGED LOCATION 'abfss://metadata@bause1qamdlnudrt.dfs.core.windows.net/';

Step 4: Grant Permissions

GRANT MANAGE ON EXTERNAL LOCATION qa_archive_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION qa_bronze_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION qa_gold_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION qa_landing_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION qa_logging_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION qa_metadata_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION qa_metastore_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION qa_silver_location TO EXL_team;

4Ô∏è‚É£ Setup for PROD Environment (ba-use1-prod-adb-daas)

Step 1: Create External Locations (via UI)
	1.	Go to Databricks UI ‚Üí Data ‚Üí External Locations.
	2.	Click Create External Location.
	3.	Fill in the details.
	4.	Repeat for all containers.

Step 2: Create the Catalog

CREATE CATALOG PH_EMR_CATALOG_PROD 
MANAGED LOCATION 'abfss://metastore@bause1prodmdlnudrt.dfs.core.windows.net/';

Step 3: Create Schemas

USE CATALOG PH_EMR_CATALOG_PROD;

CREATE SCHEMA logging 
MANAGED LOCATION 'abfss://logging@bause1prodmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA metadata 
MANAGED LOCATION 'abfss://metadata@bause1prodmdlnudrt.dfs.core.windows.net/';

Step 4: Grant Permissions

GRANT MANAGE ON EXTERNAL LOCATION prod_archive_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION prod_bronze_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION prod_gold_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION prod_landing_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION prod_logging_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION prod_metadata_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION prod_metastore_location TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION prod_silver_location TO EXL_team;

‚úÖ Summary

‚úî Databricks Connector created for each Storage Account
‚úî External Locations created via UI with ‚Äò_location‚Äô suffix
‚úî Managed Catalogs & Schemas created
‚úî Permissions granted exactly as you requested

üöÄ This ensures a fully configured, scalable, and secure Databricks environment. Let me know if any refinements are needed!














Databricks Unity Catalog Setup Guide (Step-by-Step for Each Environment)

This guide provides detailed step-by-step instructions for setting up Unity Catalog in Databricks for each environment (DEV, QA, PROD). The setup includes:
	1.	Creating an Azure Databricks Connector (Prerequisite for External Locations)
	2.	Creating External Locations (via UI)
	3.	Creating Catalogs
	4.	Creating Schemas
	5.	Granting Permissions to EXL Team

1Ô∏è‚É£ Prerequisite: Create an Azure Databricks Connector (Required for External Locations)

Before creating external locations, we need to create an Azure Databricks Connector to allow Databricks to authenticate with Azure Storage Accounts (ADLS Gen2).

Steps to Create the Databricks Connector
	1.	Go to Azure Portal ‚Üí Storage Accounts.
	2.	Open the Storage Account for your environment:
	‚Ä¢	DEV ‚Üí bause1devmdlnudrt
	‚Ä¢	QA ‚Üí bause1qamdlnudrt
	‚Ä¢	PROD ‚Üí bause1prodmdlnudrt
	3.	In the left panel, go to Access Control (IAM).
	4.	Click + Add ‚Üí Add Role Assignment.
	5.	Assign the following roles to Azure Databricks Connector:
	‚Ä¢	Storage Blob Data Contributor
	‚Ä¢	Storage Blob Data Reader
	6.	Click Next ‚Üí Assign Access to Managed Identity.
	7.	Select the Azure Databricks Connector for the environment:
	‚Ä¢	DEV ‚Üí bause1dev-adb-access-connector
	‚Ä¢	QA ‚Üí bause1qa-adb-access-connector
	‚Ä¢	PROD ‚Üí bause1prod-adb-access-connector
	8.	Click Next ‚Üí Review + Assign.

Repeat these steps for all environments.

2Ô∏è‚É£ Setup for DEV Environment (ba-use1-dev-adb-daas)

Step 1: Create External Locations (via UI)
	1.	Go to Databricks UI ‚Üí Data ‚Üí External Locations.
	2.	Click Create External Location.
	3.	Fill in the details:
	‚Ä¢	Name: dev_<container>_location (e.g., dev_bronze_location)
	‚Ä¢	Storage URL: abfss://<container>@bause1devmdlnudrt.dfs.core.windows.net/
	‚Ä¢	Credential: Select Databricks Connector ‚Üí bause1dev-adb-access-connector
	4.	Click Create.
	5.	Repeat for all containers.

Step 2: Create the Catalog

CREATE CATALOG PH_EMR_DEV_CATALOG 
MANAGED LOCATION 'abfss://metastore@bause1devmdlnudrt.dfs.core.windows.net/';

Step 3: Create Schemas

USE CATALOG PH_EMR_DEV_CATALOG;

CREATE SCHEMA logging 
MANAGED LOCATION 'abfss://logging@bause1devmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA metadata 
MANAGED LOCATION 'abfss://metadata@bause1devmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA bronze 
MANAGED LOCATION 'abfss://bronze@bause1devmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA silver 
MANAGED LOCATION 'abfss://silver@bause1devmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA gold 
MANAGED LOCATION 'abfss://gold@bause1devmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA rco-dw 
MANAGED LOCATION 'abfss://rco-dw@bause1devmdlnudrt.dfs.core.windows.net/';

Step 4: Grant Permissions

GRANT USAGE ON CATALOG PH_EMR_DEV_CATALOG TO `EXL_team`;
GRANT OWNERSHIP ON ALL SCHEMAS IN CATALOG PH_EMR_DEV_CATALOG TO `EXL_team`;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN CATALOG PH_EMR_DEV_CATALOG TO `EXL_team`;

GRANT MANAGE ON EXTERNAL LOCATION dev_bronze_location TO EXL_team;

3Ô∏è‚É£ Setup for QA Environment (ba-use1-qa-adb-daas)

Step 1: Create External Locations (via UI)
	1.	Go to Databricks UI ‚Üí Data ‚Üí External Locations.
	2.	Click Create External Location.
	3.	Fill in the details:
	‚Ä¢	Name: qa_<container>_location
	‚Ä¢	Storage URL: abfss://<container>@bause1qamdlnudrt.dfs.core.windows.net/
	‚Ä¢	Credential: bause1qa-adb-access-connector
	4.	Click Create.
	5.	Repeat for all containers.

Step 2: Create the Catalog

CREATE CATALOG PH_EMR_QA_CATALOG 
MANAGED LOCATION 'abfss://metastore@bause1qamdlnudrt.dfs.core.windows.net/';

Step 3: Create Schemas

USE CATALOG PH_EMR_QA_CATALOG;

CREATE SCHEMA logging 
MANAGED LOCATION 'abfss://logging@bause1qamdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA metadata 
MANAGED LOCATION 'abfss://metadata@bause1qamdlnudrt.dfs.core.windows.net/';

Step 4: Grant Permissions

GRANT USAGE ON CATALOG PH_EMR_QA_CATALOG TO `EXL_team`;
GRANT MANAGE ON EXTERNAL LOCATION qa_bronze_location TO EXL_team;

4Ô∏è‚É£ Setup for PROD Environment (ba-use1-prod-adb-daas)

Step 1: Create External Locations (via UI)
	1.	Go to Databricks UI ‚Üí Data ‚Üí External Locations.
	2.	Click Create External Location.
	3.	Fill in the details:
	‚Ä¢	Name: prod_<container>_location
	‚Ä¢	Storage URL: abfss://<container>@bause1prodmdlnudrt.dfs.core.windows.net/
	‚Ä¢	Credential: bause1prod-adb-access-connector
	4.	Click Create.
	5.	Repeat for all containers.

Step 2: Create the Catalog

CREATE CATALOG PH_EMR_PROD_CATALOG 
MANAGED LOCATION 'abfss://metastore@bause1prodmdlnudrt.dfs.core.windows.net/';

Step 3: Create Schemas

USE CATALOG PH_EMR_PROD_CATALOG;

CREATE SCHEMA logging 
MANAGED LOCATION 'abfss://logging@bause1prodmdlnudrt.dfs.core.windows.net/';

CREATE SCHEMA metadata 
MANAGED LOCATION 'abfss://metadata@bause1prodmdlnudrt.dfs.core.windows.net/';

Step 4: Grant Permissions

GRANT USAGE ON CATALOG PH_EMR_PROD_CATALOG TO `EXL_team`;
GRANT MANAGE ON EXTERNAL LOCATION prod_bronze_location TO EXL_team;

‚úÖ Summary

‚úî Databricks Connector created for each Storage Account
‚úî External Locations created via UI
‚úî Managed Catalogs & Schemas created
‚úî Permissions granted

EXL Team Access Summary:

GRANT MANAGE, READ FILES, WRITE FILES, CREATE TABLE, CREATE MANAGED STORAGE ON EXTERNAL LOCATION dev_bronze_location TO EXL_team;
GRANT MANAGE, READ FILES, WRITE FILES, CREATE TABLE, CREATE MANAGED STORAGE ON EXTERNAL LOCATION qa_bronze_location TO EXL_team;
GRANT MANAGE, READ FILES, WRITE FILES, CREATE TABLE, CREATE MANAGED STORAGE ON EXTERNAL LOCATION prod_bronze_location TO EXL_team;

GRANT MANAGE ON SCHEMA main.default TO EXL_team;
GRANT CREATE TABLE ON SCHEMA main.default TO EXL_team;

üöÄ This ensures a secure and controlled Databricks environment. Let me know if any refinements are needed!












Step 2: Create the Catalog

CREATE CATALOG PH_EMR_DEV_CATALOG 
MANAGED LOCATION 'abfss://metastore@badevmadlnudrt.dfs.core.windows.net/';

Step 3: Create Schemas

USE CATALOG PH_EMR_DEV_CATALOG;

CREATE SCHEMA logging 
MANAGED LOCATION 'abfss://logging@badevmadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA metadata 
MANAGED LOCATION 'abfss://metadata@badevmadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA bronze 
MANAGED LOCATION 'abfss://bronze@badevmadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA silver 
MANAGED LOCATION 'abfss://silver@badevmadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA gold 
MANAGED LOCATION 'abfss://gold@badevmadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA rco-dw 
MANAGED LOCATION 'abfss://rco-dw@badevmadlnudrt.dfs.core.windows.net/';

Step 4: Grant Permissions

GRANT USAGE ON CATALOG PH_EMR_DEV_CATALOG TO `exl_team`;
GRANT OWNERSHIP ON ALL SCHEMAS IN CATALOG PH_EMR_DEV_CATALOG TO `exl_team`;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN CATALOG PH_EMR_DEV_CATALOG TO `exl_team`;
GRANT MODIFY ON ALL SCHEMAS IN CATALOG PH_EMR_DEV_CATALOG TO `exl_team`;
GRANT READ, WRITE ON EXTERNAL LOCATION dev_bronze_location TO `exl_team`;

3Ô∏è‚É£ Setup for QA Environment (ba-db-qa)

Step 1: Create External Locations (via UI)
	1.	Go to Databricks UI ‚Üí Data ‚Üí External Locations.
	2.	Click Create External Location.
	3.	Fill in the details:
	‚Ä¢	Name: qa_<container>_location (e.g., qa_bronze_location)
	‚Ä¢	Storage URL: abfss://<container>@baqamadlnudrt.dfs.core.windows.net/
	‚Ä¢	Credential: Select Databricks Connector.
	4.	Click Create.
	5.	Repeat for all containers.

Step 2: Create the Catalog

CREATE CATALOG PH_EMR_QA_CATALOG 
MANAGED LOCATION 'abfss://metastore@baqamadlnudrt.dfs.core.windows.net/';

Step 3: Create Schemas

USE CATALOG PH_EMR_QA_CATALOG;

CREATE SCHEMA logging 
MANAGED LOCATION 'abfss://logging@baqamadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA metadata 
MANAGED LOCATION 'abfss://metadata@baqamadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA bronze 
MANAGED LOCATION 'abfss://bronze@baqamadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA silver 
MANAGED LOCATION 'abfss://silver@baqamadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA gold 
MANAGED LOCATION 'abfss://gold@baqamadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA rco-dw 
MANAGED LOCATION 'abfss://rco-dw@baqamadlnudrt.dfs.core.windows.net/';

Step 4: Grant Permissions

GRANT USAGE ON CATALOG PH_EMR_QA_CATALOG TO `exl_team`;
GRANT OWNERSHIP ON ALL SCHEMAS IN CATALOG PH_EMR_QA_CATALOG TO `exl_team`;
GRANT READ, WRITE ON EXTERNAL LOCATION qa_bronze_location TO `exl_team`;

4Ô∏è‚É£ Setup for PROD Environment (ba-db-prod)

Step 1: Create External Locations (via UI)
	1.	Go to Databricks UI ‚Üí Data ‚Üí External Locations.
	2.	Click Create External Location.
	3.	Fill in the details.
	4.	Repeat for all containers.

Step 2: Create the Catalog

CREATE CATALOG PH_EMR_PROD_CATALOG 
MANAGED LOCATION 'abfss://metastore@baprodmadlnudrt.dfs.core.windows.net/';

Step 3: Create Schemas

USE CATALOG PH_EMR_PROD_CATALOG;

CREATE SCHEMA logging 
MANAGED LOCATION 'abfss://logging@baprodmadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA metadata 
MANAGED LOCATION 'abfss://metadata@baprodmadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA bronze 
MANAGED LOCATION 'abfss://bronze@baprodmadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA silver 
MANAGED LOCATION 'abfss://silver@baprodmadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA gold 
MANAGED LOCATION 'abfss://gold@baprodmadlnudrt.dfs.core.windows.net/';

CREATE SCHEMA rco-dw 
MANAGED LOCATION 'abfss://rco-dw@baprodmadlnudrt.dfs.core.windows.net/';

Step 4: Grant Permissions

GRANT USAGE ON CATALOG PH_EMR_PROD_CATALOG TO `exl_team`;
GRANT OWNERSHIP ON ALL SCHEMAS IN CATALOG PH_EMR_PROD_CATALOG TO `exl_team`;
GRANT READ, WRITE ON EXTERNAL LOCATION prod_bronze_location TO `exl_team`;

‚úÖ Summary

‚úî Databricks Connector created for each Storage Account
‚úî External Locations created via UI
‚úî Managed Catalogs & Schemas created
‚úî Permissions granted

This setup ensures secure and controlled access across environments. üöÄ Let me know if you need any refinements!



workspace name
ba-use1-dev-adb-daas
ba-use1-qa-adb-daas
ba-use1-prod-adb-daas

Storage account
bause1devmdlnudrt
bause1qamdlnudrt
bause1prodmdlnudrt

Azure databricks connector name
bause1dev-adb-access-connector
bause1qa-adb-access-connector
bause1prod-adb-access-connector

Accesses to be given
apart from data editor role
GRANT MANAGE ON EXTERNAL LOCATION archive TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION bronze TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION gold TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION landing TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION logging TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION metadata TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION metastore TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION silver TO EXL_team;




GRANT READ FILES ON EXTERNAL LOCATION archive TO EXL_team;
GRANT READ FILES ON EXTERNAL LOCATION bronze TO EXL_team;
GRANT READ FILES ON EXTERNAL LOCATION gold TO EXL_team;
GRANT READ FILES ON EXTERNAL LOCATION landing TO EXL_team
GRANT READ FILES ON EXTERNAL LOCATION logging TO EXL_team;
GRANT READ FILES ON EXTERNAL LOCATION metadata TO EXL_team;
GRANT READ FILES ON EXTERNAL LOCATION metastore TO EXL_team;
GRANT READ FILES ON EXTERNAL LOCATION silver TO EXL_team;
 

GRANT WRITE FILES ON EXTERNAL LOCATION archive TO EXL_team;
GRANT WRITE FILES ON EXTERNAL LOCATION bronze TO EXL_team;
GRANT WRITE FILES ON EXTERNAL LOCATION gold TO EXL_team;
GRANT WRITE FILES ON EXTERNAL LOCATION landing TO EXL_team;
GRANT WRITE FILES ON EXTERNAL LOCATION logging TO EXL_team;
GRANT WRITE FILES ON EXTERNAL LOCATION metadata TO EXL_team;
GRANT WRITE FILES ON EXTERNAL LOCATION metastore TO EXL_team;
GRANT WRITE FILES ON EXTERNAL LOCATION silver TO EXL_team;


GRANT MANAGE ON EXTERNAL LOCATION archive TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION bronze TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION gold TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION landing TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION logging TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION metadata TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION metastore TO EXL_team;
GRANT MANAGE ON EXTERNAL LOCATION silver TO EXL_team;






GRANT CREATE TABLE ON EXTERNAL LOCATION archive TO EXL_team;
GRANT CREATE TABLE ON EXTERNAL LOCATION bronze TO EXL_team;
GRANT CREATE TABLE ON EXTERNAL LOCATION gold TO EXL_team;
GRANT CREATE TABLE ON EXTERNAL LOCATION landing TO EXL_team;
GRANT CREATE TABLE ON EXTERNAL LOCATION logging TO EXL_team;
GRANT CREATE TABLE ON EXTERNAL LOCATION metadata TO EXL_team;
GRANT CREATE TABLE ON EXTERNAL LOCATION metastore TO EXL_team;
GRANT CREATE TABLE ON EXTERNAL LOCATION silver TO EXL_team;





 GRANT CREATE MANAGED STORAGE ON EXTERNAL LOCATION archive TO EXL_team;
GRANT CREATE MANAGED STORAGE ON EXTERNAL LOCATION bronze TO EXL_team;
 GRANT CREATE MANAGED STORAGE ON EXTERNAL LOCATION gold TO EXL_team;
GRANT CREATE MANAGED STORAGE ON EXTERNAL LOCATION landing TO EXL_team;
GRANT CREATE MANAGED STORAGE ON EXTERNAL LOCATION logging TO EXL_team;
 GRANT CREATE MANAGED STORAGE ON EXTERNAL LOCATION metadata TO EXL_team;
GRANT CREATE MANAGED STORAGE ON EXTERNAL LOCATION metastore TO EXL_team;
GRANT CREATE MANAGED STORAGE ON EXTERNAL LOCATION silver TO EXL_team;



GRANT MANAGE ON SCHEMA  main.default TO EXL_team;
GRANT CREATE TABLE ON SCHEMA  main.default TO EXL_team;


